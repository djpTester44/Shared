/* ONLY WORKS WITH TENTANT BASED ENDPOINTS */

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
  <title>AppFinder</title>
  <meta name="description" value="A tool for locating content in the Salesforce Marketing Cloud Application" />
  %%[
   /* Pull User Input Data From Passed URL Parameters */
   set @ContentType = RequestParameter("ContentType")
   set @Property1 = RequestParameter("Property1")
   set @SimpleOperator1 = RequestParameter("SimpleOperator1")
   set @Value1 = RequestParameter("Value1")
   set @LogicalOperator = RequestParameter("LogicalOperator")
   set @Property2 = RequestParameter("Property2")
   set @SimpleOperator2 = RequestParameter("SimpleOperator2")
   set @Value2 = RequestParameter("Value2")
   set @Delim = RequestParameter("Delim")
   set @GlobalSearch = RequestParameter("GlobalSearch")
   set @MaxResults = RequestParameter("MaxResults")
   set @ComplexSearch = RequestParameter("ComplexSearch")
   set @ShowID = RequestParameter("ShowID")
   set @ShowFID = RequestParameter("ShowFID")
  ]%%
  <script runat="server" language="JavaScript">
   Platform.Load("Core","1");

   /* Folder Structure Utility Functions */
   function findParent(ChildID, GlobalSearch) {
    var filter = {
     Property: "ID",
     SimpleOperator: "equals",
     Value: ChildID
    };
    var ChildFolder = Retrieve("DataFolder", filter, GlobalSearch).Results[0];
    var filter = {
     Property: "ID",
     SimpleOperator: "equals",
     Value: ChildFolder.ParentFolder.ID
    };
    var ParentFolder = Retrieve("DataFolder", filter, GlobalSearch).Results[0];
    return ParentFolder;
   };
   function pathFinder(initial_obj, delim, GlobalSearch, MaxResults, ShowID, ShowFID) {
    var i = 0;
    var path = "";
    /* Cycle Returned Objects */
    while (i < initial_obj.Results.length && i < MaxResults) {
     var new_path = "";
     if ((typeof initial_obj.Results[i].CategoryID !== 'undefined' && initial_obj.Results[i].CategoryID > 0) || (initial_obj.Results[i].ParentFolder.ID  !== 'undefined' && initial_obj.Results[i].ParentFolder.ID > 0)) {
      
      /* Capture Object ID if ShowID is True */
      if (ShowID == true && typeof initial_obj.Results[i].ID !== 'undefined' && initial_obj.Results[i].ID > 0) {
       var ObjID = " (" + initial_obj.Results[i].ID + ") ";
      }
      else if (ShowID == true && typeof initial_obj.Results[i].ObjectID !== 'undefined' && initial_obj.Results[i].ObjectID > 0) {
       var ObjID = " (" + initial_obj.Results[i].ObjectID + ") ";
      }
      else {
       var ObjID = "";
      }

      /* Get Parent Folder's ID for Path Lookup */
      var filter
      if (typeof initial_obj.Results[i].ParentFolder.ID  !== 'undefined' && initial_obj.Results[i].ParentFolder.ID > 0) {
       filter = {
        Property: "ID",
        SimpleOperator: "equals",
        Value: initial_obj.Results[i].ParentFolder.ID
       };
      }
      else if (typeof initial_obj.Results[i].CategoryID  !== 'undefined' && initial_obj.Results[i].CategoryID > 0) {
       filter = {
        Property: "ID",
        SimpleOperator: "equals",
        Value: initial_obj.Results[i].CategoryID
       };
      }
      else if (typeof initial_obj.Results[i].Category  !== 'undefined' && initial_obj.Results[i].Category > 0) {
       filter = {
        Property: "ID",
        SimpleOperator: "equals",
        Value: initial_obj.Results[i].Category
       };
      }

      /* Retrieve Parent Folder and Show ID if ShowFID is True */
      if (typeof filter  !== 'undefined' && filter.length > 0) {
       var folder = Retrieve("DataFolder", filter, GlobalSearch).Results[0];
       if (typeof folder.ID  !== 'undefined' && folder.ID > 0) {
        if (ShowFID == true) {
         var FID = " (" + folder.ID + ") ";
        }
        else {
         var FID = "";
        }

        /* Build Folder Path for Object */
        if (typeof initial_obj.Results[i].Name !== 'undefined') {
         new_path += decodeURIComponent(folder.Name + FID + delim + "<span>" + initial_obj.Results[i].Name + "</span>");
        }
        else if (typeof initial_obj.Results[i].DisplayName !== 'undefined') {
         new_path += decodeURIComponent(folder.Name + FID + delim + "<span>" + initial_obj.Results[i].DisplayName + "</span>");
        }
        else if (typeof initial_obj.Results[i].ListName !== 'undefined') {
         new_path += decodeURIComponent(folder.Name + FID + delim + "<span>" + initial_obj.Results[i].ListName + "</span>");
        }
        else if (typeof initial_obj.Results[i].TemplateName !== 'undefined') {
         new_path += decodeURIComponent(folder.Name + FID + delim + "<span>" + initial_obj.Results[i].TemplateName + "</span>");
        }
        else if (typeof initial_obj.Results[i].SendID !== 'undefined') {
         new_path += decodeURIComponent(folder.Name + FID + delim + "<span>" + initial_obj.Results[i].SendID + "</span>");
        }

        else {
         new_path += folder.Name + FID;
        }
        var parent = findParent(folder.ID, GlobalSearch);
        while (typeof parent !== 'undefined') {
         if (ShowFID == true) {
          var PID = " (" + parent.ID + ") ";
         }
         else {
          var PID = "";
         }
         new_path = decodeURIComponent(parent.Name + PID + delim + new_path);
         parent = findParent(parent.ID, GlobalSearch);
        }

        /* Append to Existing Object Paths */
        path += "<div class='path'>" + new_path + ObjID + "</div>";
       }
      }
     }
     i++;
    };
    return path;
   };


   /* Content Retrieval Function (Identifying Fields Only, Customize As Needed) */
   function GetFields(content_type) {
    var cols = [];
    cols.push("ObjectID","ID","Name","CustomerKey","CategoryID");
    if (content_type == "ContentArea") {
    }
    else if (content_type == "DataExtension") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    else if (content_type == "DataFolder") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "CategoryID") {
       cols.splice(i,1);
       i--;
      }
     }
     cols.push("ParentFolder.ID");
    }
    else if (content_type == "Email") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ObjectID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    else if (content_type == "Portfolio") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID" || cols[i] == "Name") {
       cols.splice(i,1);
       i--;
      }
     }
     cols.push("DisplayName");
    }
    else if (content_type == "FilterDefinition") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    else if (content_type == "Group") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "CategoryID" || cols[i] == "CustomerKey") {
       cols.splice(i,1);
       i--;
      }
     }
     cols.push("Category");
    }
    else if (content_type == "List") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "CategoryID" || cols[i] == "Name") {
       cols.splice(i,1);
       i--;
      }
     }
     cols.push("Category","ListName");
    }
    else if (content_type == "Template") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "Name") {
       cols.splice(i,1);
       i--;
      }
     }
     cols.push("TemplateName");
    }
    else if (content_type == "EmailSendDefinition") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    else if (content_type == "QueryDefinition") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    else if (content_type == "TriggeredSendDefinition") {
     for(var i = 0; i < cols.length; i++) {
      if (cols[i] == "ID") {
       cols.splice(i,1);
       i--;
      }
     }
    }
    return cols;
   }
   function Retrieve(content_type, filter, GlobalSearch, MaxResults) {
    var prox = new Script.Util.WSProxy();
    var cols = GetFields(content_type);
    var opts = {
     BatchSize: MaxResults /* For future use */
    };
    var props = {
     QueryAllAccounts: GlobalSearch
    };
    if (typeof filter !== 'undefined' && filter.length > 0) {
     var data = prox.retrieve(content_type, cols, filter, opts, props);
    }
    else {
     var data
    }
    return data;
   };
   function AppLookup() {
    /* Pull AMPScript GET Variables for SSJS Processing */
    var content_type = Variable.GetValue("@ContentType");
    var property1 = Variable.GetValue("@Property1");
    var simpleop1 = Variable.GetValue("@SimpleOperator1");
    if (simpleop1 == "IN") {
     var value1 = Variable.GetValue("@Value1");
    }
    else {
     var value1 = Variable.GetValue("@Value1");
    }
    var delim = Variable.GetValue("@Delim");
    var GlobalSearch = (Variable.GetValue("@GlobalSearch") == "true");
    var MaxResults = parseInt(Variable.GetValue("@MaxResults"));
    var ComplexSearch = (Variable.GetValue("@ComplexSearch") == "true");
    var ShowID = (Variable.GetValue("@ShowID") == "true");
    var ShowFID = (Variable.GetValue("@ShowFID") == "true");
    
    /* Build Search Filter */
    var filter
    if (ComplexSearch == true) {
     var logicalop = Variable.GetValue("@LogicalOperator");
     var property2 = Variable.GetValue("@Property2");
     var simpleop2 = Variable.GetValue("@SimpleOperator2");
     var value2 = Variable.GetValue("@Value2");
     filter = {
      LeftOperand: {
       Property: property1,
       SimpleOperator: simpleop1,
       Value: value1
      },
      LogicalOperator: logicalop,
      RightOperand: {
       Property: property2,
       SimpleOperator: simpleop2,
       Value: value2
      }
     };
    }
    else {
     filter = {
      Property: property1,
      SimpleOperator: simpleop1,
      Value: value1
     };
    }

    /* Retrieve Results and Build Path */
    if (filter.length > 0) {
     var data = Retrieve(content_type, filter, GlobalSearch, MaxResults);
     if (data.Status == "OK" || data.Status == "MoreDataAvailable" && data.Results.length > 0) {
      Variable.SetValue("@Path", pathFinder(data, delim, GlobalSearch, MaxResults, ShowID, ShowFID));
     }
     else {
      Variable.SetValue("@Error", data.Status);
     }
    }
   };
  </script>

  %%[ if Not Empty(@ContentType) then ]%%
  <script runat="server" language="JavaScript">
   /* Only Perform Search if URL has Search Parameters */
   AppLookup();
  </script>
  %%[ endif ]%%

  <!-- Client-Side Scripting -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
  <script>
   $(document).ready(function() {
    /* URL Object Encoding Function */
    URLParams = function(obj) {
       var str = [];
     for(var p in obj)
      if (obj.hasOwnProperty(p)) {
       str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
      }
     return str.join("&");
    };
    /* Loading Function */
    function Load() {
     
    };
    /* Begin Search Function */
    function BeginSearch() {
     if (($("#SearchInput1").val() != "" && $("#ComplexSearch").is(':checked') == false) || ($("#ComplexSearch").is(':checked') == true && $("#SearchInput1").val() != "" && $("#SearchInput2").val() != "")) {
      $("#Path").css("visibility","hidden");
      var i = 0;
      var loader = setInterval(function() {
       i = ++i % 4;
        $(".searching").html("Searching"+Array(i+1).join(".")).show();
      }, 500);
      var SearchObj = {
       ContentType: $("#FinderSelect").val(),
       Property1: $("#PropertySelect1").val(),
       SimpleOperator1: $("#OperatorSelect1").val(),
       Value1: $("#SearchInput1").val(),
       Delim: encodeURIComponent($("#Delimiter").val()),
       MaxResults: $("#MaxResults").val(),
       GlobalSearch: $("#GlobalSearch").is(':checked'),
       ComplexSearch: $("#ComplexSearch").is(':checked'),
       ShowID: $("#ShowID").is(':checked'),
       ShowFID: $("#ShowFID").is(':checked')
      };
      if ($("#ComplexSearch").is(':checked') == true) {
       SearchObj.LogicalOperator = $("#LogicSelect").val();
       SearchObj.Property2 = $("#PropertySelect2").val();
       SearchObj.SimpleOperator2 = $("#OperatorSelect2").val(),
       SearchObj.Value2 = $("#SearchInput2").val();
      }
      console.log(SearchObj);
      if (window.location.href.indexOf("?") > -1) {
       var FrameURL = window.location.href + "&" + URLParams(SearchObj);
      }
      else {
       var FrameURL = window.location.href + "?" + URLParams(SearchObj);
      }
      $("#Path").attr("src",FrameURL);
      $("#Path").css("height", ($("#MaxResults").val()*30) + "px");
      $("#Path").on("load", function() {
       clearInterval(loader);
       $(".searching").html("").hide();
       $("#Path").css("visibility","visible");
      });
     }
    };

    /* Search Object Change */
    $("#FinderSelect").change(function(){
     var selected_val = $(this).val();
     var selected_text = $("#FinderSelect option:selected").text();
     if (selected_val == "SelectOne") {
      $("#QueryBuilder").hide();
     }
     else {
      $("#QueryBuilder").show();
     }
     $("#FinderValue").html(selected_text);

     /* Populate Unique Searchable Properties For Selected Object */
     if (selected_val == "ContentArea") {
      var SearchProperties = [
       {val: "ID", text: "Content Area ID"},
       {val: "Name", text: "Content Area Name"},
       {val: "Content",  text: "Content Area Content"},
       {val: "CustomerKey", text: "Content Area Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "Layout", text: "Layout"},
       {val: "IsDynamicContent", text: "Is Dynamic Content"},
       {val: "IsSurvey", text: "Is Survey"},
       {val: "IsBlank", text: "Is Blank"},
       {val: "RowObjectID", text: "Row Object ID"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"}
      ];
     }
     else if (selected_val == "DataExtension") {
      var SearchProperties = [
       {val: "Name", text: "Data Extension Name"},
       {val: "Description", text: "Data Extension Description"},
       {val: "CustomerKey", text: "Data Extension Customer Key"},
       {val: "SendableDataExtensionField.Name", text: "Data Extension Field Name"},
       {val: "SendableSubscriberField.Name", text: "Subscriber Field Name"},
       {val: "Template.CustomerKey", text: "Data Extension Template Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "DataRetentionPeriodLength", text: "Data Retention Period Length"},
       {val: "DataRetentionPeriodUnitOfMeasure", text: "Data Retention Period Unit of Measure"},
       {val: "RowBasedRetention", text: "Row Based Retention"},
       {val: "ResetRetentionOnImport", text: "Reset Retention on Import"},
       {val: "RetainUntil", text: "Retain Until"},
       {val: "DeleteAtEndOfRetentionPeriod", text: "Delete At End Of Retention Period"},
       {val: "IsSendable", text: "Is Sendable"},
       {val: "IsTestable", text: "Is Testable"},
       {val: "IsPlatformObject", text: "Is Platform Object"},
       {val: "Status", text: "Status"},
       {val: "ObjectID", text: "Object ID"},
       {val: "PartnerKey", text: "Partner Key"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"}
      ];
     }
     else if (selected_val == "Email") {
      var SearchProperties = [
       {val: "Name", text: "Email Name"},
       {val: "ID", text: "Email ID"},
       {val: "Subject", text: "Subject Line"},
       {val: "PreHeader", text: "Preheader"},
       {val: "CharacterSet", text: "Character Encoding"},
       {val: "HTMLBody", text: "HTML"},
       {val: "TextBody", text: "Text"},
       {val: "EmailType", text: "Email Type"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ClonedFromID", text: "Copied From Email ID"},
       {val: "ContentAreas", text: "Content Areas"},
       {val: "HasDynamicSubjectLine", text: "Has Dynamic Subject Line"},
       {val: "IsHTMLPaste", text: "Is HTML Paste"},
       {val: "IsActive", text: "Is Active"},
       {val: "Status", text: "Status"},
       {val: "ContentCheckStatus", text: "Content Check Status"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "PartnerKey", text: "Partner Key"},
       {val: "Folder", text: "Parent Folder Name"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"},
       {val: "Client.PartnerClientKey", text: "Client Partner Client Key"}
      ];
     }
     else if (selected_val == "FilterDefinition") {
      var SearchProperties = [
       {val: "Name", text: "Data Filter Name"},
       {val: "Description", text: "Data Filter Description"},
       {val: "CustomerKey", text: "Data Filter Customer Key"},
       {val: "DataSource.Name", text: "Data Source Name"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"}
      ];
     }
     else if (selected_val == "DataFolder") {
      var SearchProperties = [
       {val: "Name", text: "Folder Name"},
       {val: "ID", text: "Folder ID"},
       {val: "ParentFolder.Name", text: "Parent Folder Name"},
       {val: "ParentFolder.ID", text: "Parent Folder ID"},
       {val: "ContentType", text: "Object ID"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ObjectID", text: "Object ID"}
      ];
     }
     else if (selected_val == "Group") {
      var SearchProperties = [
       {val: "Name", text: "Group Name"},
       {val: "Description", text: "Group Description"},
       {val: "ID", text: "Group ID"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ObjectID", text: "Object ID"},
       {val: "Category", text: "Parent Folder ID"}
      ];
     }
     else if (selected_val == "Portfolio") {
      $("#FinderValue").html("Image");
      var SearchProperties = [
       {val: "FileURL", text: "File URL"},
       {val: "FileName", text: "File Name"},
       {val: "DisplayName", text: "Image Display Name"},
       {val: "Description", text: "Image Description"},
       {val: "TypeDescription", text: "Type Description"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "CreatedBy", text: "Created By"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ModifiedBy", text: "Modified By"},
       {val: "ModifiedByName", text: "Modified By Name"},
       {val: "FileSizeKB", text: "File Size (in KB)"},
       {val: "FileHeightPX", text: "File Height (in PX)"},
       {val: "FileWidthPX", text: "File Width (in PX)"},
       {val: "ThumbSizeKB", text: "Thumbnail Size (in KB)"},
       {val: "ThumbURL", text: "Thumbnail URL"},
       {val: "CacheClearTime", text: "Cache Clear Time"},
       {val: "IsUploaded", text: "Is Uploaded"},
       {val: "IsActive", text: "Is Active"},
       {val: "ObjectID", text: "Object ID"},
       {val: "RowObjectID", text: "Row Object ID"},
       {val: "PartnerKey", text: "Partner Key"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"}
      ];
     }
     else if (selected_val == "List") {
      var SearchProperties = [
       {val: "ListName", text: "List Name"},
       {val: "Description", text: "List Description"},
       {val: "ID", text: "List ID"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "ObjectID", text: "Object ID"},
       {val: "Category", text: "Parent Folder ID"}
      ];
     }
     else if (selected_val == "QueryDefinition") {
      var SearchProperties = [
       {val: "Name", text: "Query Name"},
       {val: "CustomerKey", text: "Query Customer Key"},
       {val: "Description", text: "Query Description"},
       {val: "QueryText", text: "Query Text"},
       {val: "TargetType", text: "Target Type"},
       {val: "DataExtensionTarget.Name", text: "Target Data Extension Name"},
       {val: "DataExtensionTarget.Name", text: "Target Data Extension Customer Key"},
       {val: "DataExtensionTarget.Description", text: "Target Data Extension Description"},
       {val: "TargetUpdateType", text: "Target Update Type"},
       {val: "FileType", text: "File Type"},
       {val: "FileSpec", text: "File Spec"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "Status", text: "Status"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"}
      ];
     }
     else if (selected_val == "Template") {
      var SearchProperties = [
       {val: "TemplateName", text: "Email Template Name"},
       {val: "ID", text: "Email Template ID"},
       {val: "LayoutHTML", text: "HTML"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"}
      ];
     }
     else if (selected_val == "TriggeredSendDefinition") {
      var SearchProperties = [
       {val: "Name", text: "Triggered Send Name"},
       {val: "Description", text: "Triggered Send Description"},
       {val: "Email.ID", text: "Email ID"},
       {val: "SendClassification.CustomerKey", text: "Send Classification"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "EmailSubject", text: "Email Subject Line"},
       {val: "SendWindowOpen", text: "Throttle Start Time"},
       {val: "SendWindowClose", text: "Throttle End Time"},
       {val: "SendLimit", text: "Throttle Limit"},
       {val: "IsSendLogging", text: "Enable send logging to a data extension"},
       {val: "ExclusionFilter", text: "Exclusion Filter"},
       {val: "DeduplicateByEmail", text: "De-Duplicate by Email Address"},
       {val: "IsMultipart", text: "Message Format as Multi-part MIME"},
       {val: "IsWrapped", text: "Track all links found within this email"},
       {val: "SuppressTracking", text: "Suppress this Send from Reports"},
       {val: "TestEmailAddr", text: "Test Send Email Address"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"}
      ];
     }
     else if (selected_val == "EmailSendDefinition") {
      var SearchProperties = [
       {val: "Name", text: "User-Initiated Send Name"},
       {val: "Description", text: "User-Initiated Send Description"},
       {val: "Email.ID", text: "Email ID"},
       {val: "CCEmail", text: "CC Email"},
       {val: "BccEmail", text: "BCC Email"},
       {val: "AutoBccEmail", text: "Auto BCC Email"},
       {val: "SendClassification.CustomerKey", text: "Send Classification Customer Key"},
       {val: "SenderProfile.CustomerKey", text: "Send Profile Customer Key"},
       {val: "SenderProfile.FromName", text: "Send Profile From Name"},
       {val: "SenderProfile.FromAddress", text: "Send Profile From Address"},
       {val: "DeliveryProfile.CustomerKey", text: "Delivery Profile Customer Key"},
       {val: "DeliveryProfile.SourceAddressType", text: "Delivery Profile Source Address Type"},
       {val: "DeliveryProfile.PrivateIP", text: "Delivery Profile Private IP"},
       {val: "DeliveryProfile.DomainType", text: "Delivery Profile Domain Type"},
       {val: "DeliveryProfile.PrivateDomain", text: "Delivery Profile Private Domain"},
       {val: "DeliveryProfile.HeaderSalutationSource", text: "Delivery Profile Header Salutation Source"},
       {val: "DeliveryProfile.HeaderContentArea.ID", text: "Delivery Profile Header Content Area ID"},
       {val: "DeliveryProfile.FooterSalutationSource", text: "Delivery Profile Footer Salutation Source"},
       {val: "DeliveryProfile.FooterContentArea.ID", text: "Delivery Profile Footer Content Area ID"},
       {val: "SendDefinitionList", text: "SendDefinitionList"},
       {val: "CustomerKey", text: "Customer Key"},
       {val: "CreatedDate", text: "Created Date"},
       {val: "ModifiedDate", text: "Modified Date"},
       {val: "EmailSubject", text: "Email Subject Line"},
       {val: "DynamicEmailSubject", text: "Dynamic Email Subject Line"},
       {val: "SendWindowOpen", text: "Throttle Start Time"},
       {val: "SendWindowCloses", text: "Throttle End Time"},
       {val: "SendLimit", text: "Throttle Limit"},
       {val: "Additional", text: "Additional"},
       {val: "IsSendLogging", text: "Enable send logging to a data extension"},
       {val: "ExclusionFilter", text: "Exclusion Filter"},
       {val: "DeduplicateByEmail", text: "De-Duplicate by Email Address"},
       {val: "IsMultipart", text: "Message Format as Multi-part MIME"},
       {val: "IsWrapped", text: "Track all links found within this email"},
       {val: "IsPlatformObject", text: "Is Platform Object"},
       {val: "SuppressTracking", text: "Suppress this Send from Reports"},
       {val: "TestEmailAddr", text: "Test Send Email Address"},
       {val: "ObjectID", text: "Object ID"},
       {val: "CategoryID", text: "Parent Folder ID"},
       {val: "Client.ID", text: "Client ID"}
      ];
     }

     /* Build Search Property Dropdown List */
     $("#PropertySelect1,#PropertySelect2").html("");
     $(SearchProperties).each(function() {
      $("#PropertySelect1,#PropertySelect2").append($("<option>").attr('value',this.val).text(this.text));
      if (SearchProperties[0].val == this.val) {
       $("#SearchInput1,#SearchInput2").attr("placeholder",this.text);
      }
      if ($("#FinderSelect").val() == "ContentArea" && $("#PropertySelect1").val() == "ID") {
       $("#Delimiter").val("\\");
      }
      else {
       $("#Delimiter").val(" > "); 
      }
     });

    });
    /* Search Property Changes */
    $("#PropertySelect1,#PropertySelect2").change(function(){
     BeginSearch();
     $("#SearchInput1").attr("placeholder",$("#PropertySelect1 option:selected").text());
     $("#SearchInput2").attr("placeholder",$("#PropertySelect2 option:selected").text());
     if ($("#FinderSelect").val() == "ContentArea" && $(this).val() == "ID") {
      $("#Delimiter").val("\\");
     }
     else {
      $("#Delimiter").val(" > "); 
     }
    });
    /* Search Value Changes */
    $("#OperatorSelect1,#LogicSelect,#OperatorSelect2,#SearchInput1,#SearchInput2,#Delimiter,#GlobalSearch,#MaxResults,#ShowID,#ShowFID").change(function(){
     BeginSearch();
    });

    /* Additional Options Toggle */
    $("#options-toggle").click(function(){
     $("div.options").slideToggle();
     if ($("#options-toggle").text() == "Show Additional Options") {
      $("#options-toggle").text("Hide Additional Options");
     }
     else {
      $("#options-toggle").text("Show Additional Options");
     }
    });

    /* Complex Search Toggle */
    $("#ComplexSearch").change(function() {
     $("div#ComplexBuilder").slideToggle();
    });
   });
  </script>

  <!-- Default Styles -->
  <style>
   body {
    font-family: Arial,Helvetica,sans-serif;
    text-align: center;
    background-color: #FFFFFF;
    margin: 0px;
   }
   .welcome > div {
    display: none;
    padding-top: 15px;
    font-family: inherit;
    font-size: 18px;
   }
   .welcome > div.options {
    padding-top: 0px;
    padding-left: 50px;
    font-size: 13px;
    text-align: center;
    border-top: 3px solid #E98300;
    background-color: #4F4F4F;
    color: #DDDDDD;
   }
   .welcome > div.options input {
    box-shadow: none;
    margin-right: 50px;
   }
   #options-toggle {
    float: left;
    position: relative;
    color: blue;
    cursor: pointer;
    font-size: 12px;
    color: #3F8BB6;
    padding: 3px;
   }
   h1 {
    color: #333333;
    font-family: inherit;
    font-weight: bold;
    font-size: 21px;
    line-height: 27px;
    width: 100%;
    float: left;
   }
   input::placeholder {
    color: #797979;
    font-style: italic;
   }
   input::-webkit-input-placeholder {
    color: #797979;
    font-style: italic;
   }
   input::-moz-placeholder {
    color: #797979;
    font-style: italic;
   }
   input:-ms-input-placeholder {
    color: #797979;
    font-style: italic;
   }
   input:-moz-placeholder {
    color: #797979;
    font-style: italic;
   }
   input, select {
    margin: 15px 0px 15px 0px;
    padding: 7px;
    border: 2px solid #C1C1C1;
    border-radius: 3px;
    background-color: #EEEEEE;
    box-shadow: 4px 3px 10px 1px #EEEEEE;
   }
   #ComplexBuilder {
    display: none;
   }
   iframe {
    visibility: hidden;
    border: none;
    overflow-y: hidden;
    width: 100%;
    height: 100%;
   }
   .success, .multiple, .fail, .searching {
    font-family: Verdana;
    font-size: 15px;
   }
   .success strong {
    font-weight: bold;
    color: #049b04;
   }
   .multiple strong {
    font-weight: bold;
    color: #ffa405;
   }
   .fail strong {
    font-weight: bold;
    color: #ff0000;
   }
   .searching {
    display: none;
    text-align: left;
    width: 95px;
    margin: 0 auto;
   }
   .path {
    color: #646464;
    font-size: 12px;
    font-weight: bold;
    padding: 3px;
   }
   .path div {
    display: block;
    padding: 3px;
   }
   .path span {
    color: #3F8BB6;
    text-decoration: none;
    font-weight: normal;
   }
  </style>
 </head>
 <body>
  %%[ if Empty(@ContentType) then ]%%
   <div class="welcome">
    <!-- Advanced Options Menu -->
    <div class="options">
     <label name="Delimiter" for="Delimiter">Delimiter: </label><input id="Delimiter" type="text" value=" > "></input>
     <label name="MaxResults" for="MaxResults">Maximum Results to Return: </label><input id="MaxResults" type="number" value="3"></input>
     <label name="GlobalSearch" for="GlobalSearch">Search All Business Units </label><input id="GlobalSearch" type="checkbox" checked="true"></input>
     <label name="ComplexSearch" for="ComplexSearch">Show Complex Search Options </label><input id="ComplexSearch" type="checkbox"></input>
     <label name="ShowID" for="ShowID">Show Object ID </label><input id="ShowID" type="checkbox"></input>
     <label name="ShowFID" for="ShowFID">Show Folder IDs </label><input id="ShowFID" type="checkbox"></input>
    </div>
    <span id="options-toggle">Show Additional Options</span>

    <!-- Object Selector -->
    <h1>Welcome to the AppFinder! What can I help you locate today?</h1>
    <select id="FinderSelect">
     <option value="SelectOne">Select One</option>
     <option value="ContentArea">Content Area</option>
     <option value="DataExtension">Data Extension</option>
     <option value="FilterDefinition">Data Filter</option>
     <option value="Email">Email</option>
     <option value="Template">Email Template</option>
     <option value="DataFolder">Folder</option>
     <option value="Group">Group</option>
     <option value="Portfolio">Image</option>
     <option value="List">List</option>
     <option value="QueryDefinition">Query</option>
     <option value="TriggeredSendDefinition">Triggered Send</option>
     <option value="EmailSendDefinition">User-Initiated Send</option>
    </select>

    <!-- Object Query Builder -->
    <div id="QueryBuilder">
     Great! Let me help you find that <span id="FinderValue">Object</span>. Try the search options below.<br />
     <select id="PropertySelect1"></select>
     <select id="OperatorSelect1">
      <option value="equals"> is equal to </option>
      <option value="notEquals"> does not equal </option>
      <option value="like"> is like </option>
      <option value="lessThan"> is less than </option>
      <option value="lessThanOrEqual"> is less than or equal to </option>
      <option value="greaterThan"> is greater than </option>
      <option value="greaterThanOrEqual"> is greater than or equal to </option>
     </select>
     <input id="SearchInput1" name="SearchInput1" type="text" val="" placeholder=""></input><br />
     <div id="ComplexBuilder">
      <select id="LogicSelect">
       <option value="AND"> AND </option>
       <option value="OR"> OR </option>
      </select><br />
      <select id="PropertySelect2"></select>
      <select id="OperatorSelect2">
       <option value="equals"> is equal to </option>
       <option value="notEquals"> does not equal </option>
       <option value="like"> is like </option>
       <option value="lessThan"> is less than </option>
       <option value="lessThanOrEqual"> is less than or equal to </option>
       <option value="greaterThan"> is greater than </option>
       <option value="greaterThanOrEqual"> is greater than or equal to </option>
      </select>
      <input id="SearchInput2" name="SearchInput2" type="text" val="" placeholder=""></input><br />
     </div>
     <div class="searching">Searching...</div>
     <iframe id="Path" name="Path" src=""></iframe>
    </div>
   </div>
  %%[ elseif Not Empty(@Path) AND (Add(IndexOf(@Path,"</div>"),6) < Length(@Path)) then ]%%
   <div class="multiple"><strong>I Found A Few Possible Matches...</strong> %%=v(@Path)=%%</div>
  %%[ elseif Not Empty(@Path) then ]%%
   <div class="success"><strong>Found It!</strong> %%=v(@Path)=%%</div>
  %%[ elseif Not Empty(@Error) then ]%%
   <div class="fail"><strong>%%=v(@Error)=%%</strong></div>
  %%[ else ]%%
   <div class="fail"><strong>Hmmm...sorry.</strong> I couldn't find that for you. :/</div>
  %%[ endif ]%%
 
<script>(function(a,m,i,g,o,s){o=a.createElement(g);s=a.getElementsByTagName(i)[0];o.src=m.origin+m.pathname+"/_t?eventType=CLOUDPAGESVISIT";o.width=0;o.height=0;o.style.display="none";s.appendChild(o);})(document,window.location,"body","img");</script>
</body>
</html>
